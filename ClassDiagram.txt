classDiagram
  class Components
  class Header{
    State:
        -navButton: boolean
        -width: number
    
    Hooks:
        -useTranslation
    
    Context:
        -LinkContext
    
    Methods:
        -handleClick(event: SyntheticEvent): void
        -handleResize(): null | void
        -changeNavButton(): void
  }
class LangueNav {

    State:
        -isHovered: boolean
    
    Hooks:
        -useTranslation
    
    Methods:
        -handleOnMouseEnter(): void
        -handleOnMouseLeave(): void
}

  class LinkContext{
    This is a object of type context used to 
    store where user has clicked
  }
class TrajectoryNav {

    State:
        -isHovered: Object with Properties:
            Trajectoire: boolean
            Schwarzschild: boolean
            Kerr: boolean
    
    Hooks:
        -useTranslation
    
    Methods:
        -handleMouseEnter(key: string): void
        -handleMouseLeave(key: string): void
}

class TutorielNav {   
    State:
        -isHovered: boolean
    
    Hooks:
        -useTranslation
    
    Methods:
        -handleOnMouseEnter(): void
        -handleOnMouseLeave(): void
}

class UniversNav {
    Props:
        -changeContext: (event: SyntheticEvent) => void
    
    State:
        -isHovered: Object with properties:
            univers: boolean
            simulation: boolean
    
    Hooks:
        -useTranslation
    
    Methods:
        -handleMouseEnter(key: string): void
        -handleMouseLeave(key: string): void
}


  class Home{
    state : array currentImage
    hooks : 
        -useTranslation
        -useEffect
    
  }
  class Graphics
  class PlotlyComponent{
    enum: TypesImages
    Props:
        -x: Object with properties xData: number[], xName: string
        -y: Object with properties xData: number[], xName: string
        -title: string
        -downloadButton: Object with the properties:
            -changeDownload: Function
            -isDownload: boolean
            -whatType: TypesImages
    hooks: useEffect 
    -downloadImage(gd: any, options:  format: TypesImages; width: number; height: number; filename: string; ): Promise<void>
    -newPlot(div: string, data: any[], layout: any): Promise<any>
  }
  class Canvas{
    props:
        -UniverseRef: React.RefObject<Simulation_universe>
        -handleClick: Function
        -handleChange: Function
        -params: Object with the following properties:
        -T0: number
        -H0: number
        -omegam0: number
        -omegaDE0: number

    hooks:
        -languageChanged: boolean
        -point: Object with the properties x: number and y: number
    
    -handleClick(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>)
    -drawCanvas(canvas: HTMLCanvasElement): void
    -transformDistance.OmegaToCanvas(value1: number, value2: number): 
    -updatePoint(canvas: HTMLCanvasElement, x: number, y: number): void
    -handleLanguageChange(): void
    -handleClick(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void

  }
  class SubComponents
  class Output{
    Props:
        -Universe: React.RefObject<Simulation_universe>
        -params: Object with the properties:
        -T0: number
        -H0: number
        -omegam0: number
        -omegaDE0: number
        -omega0: number
        -omega1: number
        -selectValue: Object with the properties:
        -value: string
        -isFlat: boolean
    state:
        -output: Object with the properties:
        -omegaR0: number
        -omegaK0: number
        -ageUniverse: number
        -checkSingularity: Object with the properties:
        -bigBang: Object with the properties:
        -isBigBang: boolean
        -bigCrunch: Object with the properties:
        -isBigCrunch: boolean
        -time: number
        -bigRip: Object with the properties:
        -isBigRip: boolean
        -time: number

  }
  class YRange{
    Props:
        -handleChild: Function
    State:
        -yRange : Object with properties min: number and max: number 
    hooks: useEffect
    -handleChange(event: React.changeEvent)
  }
  class Universe{
    Props:
        -params: Object with the properties:
            T0: number
            H0: number
            omegam0: number
            omegaDE0: number
            omega0: number
            omega1: number

        -selectValue: Object with the properties:
            value: string
            isFlat: boolean
    
    States:
        -params: Object with the properties:
        T0: number
        H0: number
        omegam0: number
        omegaDE0: number
        omega0: number
        omega1: number

        -selectValue: Object with the properties:
        value: string
        isFlat: boolean
    
    hooks:
        useEffect
        useRef

    -handleChange()
    -handleSelect()  
  }
  class AdjunctComputations
  class AdjunctButton{
        Props:
        -UniverseRef: React.RefObject<Simulation_universe>
        -params: Object with the properties:
            T0: number
            H0: number
            omegam0: number
            omegaDE0: number
            omega0: number
            omega1: number
        -handleSelect: Function,
        -selectValue: Object with the properties:
            value: string
            isFlat: boolean
    State: buttonClicked
    -handleClick()
  }
  class ConstantAdjunct{
    Props:
      -handleClick: Function,
      -UniverseRef: React.RefObject<Simulation_universe>,
      -params:  Object with the properties:
		T0: number,
		H0: number,
		omegam0: number,
		omegaDE0: number
      -handleSelect: Function,
      -selectValue:  Object with the properties:
        -value: string,
        -isFlat: boolean,
    State:
        -z: Object with the properties:
            z1: Object - Object with the properties:
                value: number 
                bool: boolean 
            z2: Object - Object with the properties:
                value: number 
                bool: boolean
            i_e: number
            
        -inv: Object - Object with the properties:
            dmInv: number
            tRecpetionInv: number
            tEmissionInv: number
        -result: Object with huge number of properties to be written here.
  }
  class GraphGenerator{
    Props:
    -Universe: Simulation_universe
    -handleChange()
    -handleSelect()  

    State:
    -z: Object with properties:
        zmin: number, zmax: number, zstep: number
    -graphs: React.ReactNode<Array>

    -handleClickZ()
    -handleZchanges() 
  }
  class CosmologicalConstant{
    Props:
        -params: Object with the properties:
            T0: number
            H0: number
            omegam0: number
            omegaDE0: number
            omega0: number
            omega1: number
            -handleChange()
            -handleSelect()
        -handleChange()
        -handleSelect()    

    -Enum: TypesImages conatains png, jpeg, webp, svg
    State: 
        -aTau: Object with Properties:
                x : Array[number]
                y : Array[number]
        -aRange: Object with Properties:
                amin: number
                amax: number
        -DownloadStatus: Object with properties:
                download: boolean
                type: TypesImages
    hooks:
        -useEffect
        -useRef
    
    -handleClick()
  }
  class DarkEnergy{
    Props:
        -params: Object with the properties:
            T0: number
            H0: number
            omegam0: number
            omegaDE0: number
            omega0: number
            omega1: number
            -handleChange()
            -handleSelect()
        -handleChange()
        -handleSelect()    

    Enum: TypesImages conatains png, jpeg, webp, svg
    State: 
        -aTau: Object with Properties:
                x : Array[number]
                y : Array[number]
        -aRange: Object with Properties:
                amin: number
                amax: number
        -DownloadStatus: Object with properties:
                download: boolean
                type: TypesImages
    hooks:
        -useEffect
        -useRef
    
    -handleClick()
  }
  class Warning{
    State:
        -state: Object with Properties:
            clicked: boolean
            style: css style to display or not
    -handleClick()
  }
  
  Components --> Header
  Components --> Home
  Components --> Graphics
  Components --> Universe
  Components --> Warning
  Header --> LangueNav
  Header --> LinkContext
  Header --> TrajectoryNav
  Header --> TutorielNav
  Header --> UniversNav
  Graphics --> PlotlyComponent
  Graphics --> Canvas
  Universe --> AdjunctComputations
  AdjunctComputations --> AdjunctButton
  AdjunctButton --> ConstantAdjunct
  ConstantAdjunct --> GraphGenerator
  Universe --> CosmologicalConstant
  Universe --> DarkEnergy
  Universe --> SubComponents
  SubComponents --> Output
  SubComponents --> YRange
